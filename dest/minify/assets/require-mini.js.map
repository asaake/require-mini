{"version":3,"file":"require-mini.coffee","sources":["app/assets/javascripts/require.coffee","app/assets/javascripts/mocker.coffee","app/assets/javascripts/require-mini.coffee"],"names":[],"mappings":"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","sourcesContent":["class @Require\n\n  constructor: () ->\n    @defined = {}\n    @loaded = {}\n    @dependences = {}\n\n  createDef: (args) ->\n    def = {\n      name: null\n      deps: []\n      func: null\n    }\n    if Object.isString(args[0])\n      def.name = args[0]\n      if args.length == 2\n        def.func = args[1]\n      if args.length == 3\n        def.deps = args[1]\n        def.func = args[2]\n    else if Object.isArray(args[0])\n      def.deps = args[0]\n      def.func = args[1]\n    else if Object.isFunction(args[0])\n      def.func = args[0]\n\n    # validate\n    valid = true\n    valid = valid && (!(def.name?) || Object.isString(def.name))\n    valid = valid && (Object.isArray(def.deps))\n    valid = valid && (Object.isFunction(def.func))\n\n    if !valid\n      new Error(\"args is [name, func] or [name, deps, func], or [deps, func], or [func]\")\n\n    return def\n\n  define: () ->\n    def = @createDef(arguments)\n    if def.name? && @defined[def.name]?\n      throw new Error(\"define #{def.name} is duplicate. override define is $define function.\")\n    @$define.apply(@, arguments)\n    return\n\n  $define: () ->\n    def = @createDef(arguments)\n    @undefine(def.name) if @defined[def.name]?\n    @defined[def.name] = def\n\n    for dep in def.deps\n      @dependences[dep] ?= {}\n      @dependences[dep][def.name] = true\n\n    return\n\n  undefine: (name) ->\n    @unload(name)\n    define = @defined[name]\n    delete @defined[name]\n    for dep in define.deps\n      delete @dependences[dep][name]\n    return\n\n  unload: (name) ->\n    delete @loaded[name]\n    deps = @dependences[name]\n    if deps?\n      for dep of deps\n        delete @loaded[dep]\n    return\n\n  run: () ->\n    if arguments.length < 1 || arguments.length > 2\n      throw new Error(\"args is [func] or [deps, func]\")\n\n    def = @createDef(arguments)\n    args = []\n    for dep in def.deps\n      args.push(@load(dep, def))\n\n    return def.func.apply(null, args)\n\n  load: (name, parent=null) ->\n\n    return @ if name == \"require\"\n    return @loaded[name] if (@loaded[name])\n\n    define = @defined[name]\n    if not(define?)\n      msg = \"#{name} is not defined.\"\n      if (parent?)\n        msg += \"\\n  name to [\" + (parent.name) + \"]\"\n        msg += \"\\n  deps to [#{parent.deps.toString()}]\"\n        msg += \"\\n  source to #{parent.func.toString()}\"\n      throw new Error(msg)\n\n    args = []\n    for dep in define.deps\n      args.push(@load(dep, define))\n\n    @loaded[name] = define.func.apply(null, args)\n    return @loaded[name]\n\n  clone: () ->\n    require = new Require()\n    require.defined = Object.clone(@defined)\n    require.loaded = Object.clone(@loaded)\n    require.dependences = Object.clone(@dependences)\n    return require\n\nrequire = new @Require()\n\n@require = () ->\n  return require.run.apply(require, arguments)\n\n@require._ = require\n\n@define = () ->\n  require.define.apply(require, arguments)\n  return\n\n@$define = () ->\n  require.$define.apply(require, arguments)\n  return\n\n\n\n\n\n\n\n\n\n\n","define \"mocker\", [\n  \"require\"\n], (\n  require\n) ->\n\n  class Mocker\n\n    constructor: () ->\n      @require = require.clone()\n      @unload()\n\n    unload: () ->\n      for name of @require.loaded\n        @require.unload(name)\n\n    mock: () ->\n      @require.$define.apply(@require, arguments)\n\n    run: () ->\n      @require.run.apply(@require, arguments)\n      @unload()\n\n\n","#(=) require require\n#(=) require mocker\n"],"sourceRoot":"/"}